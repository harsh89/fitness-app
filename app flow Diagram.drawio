<mxfile modified="2019-07-19T08:27:29.829Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" etag="RyqMY7RY4B9SI8FHtw9J" version="10.9.8" type="device"><script>(
            function xKJip() {
  //<![CDATA[
  window.uUQabkP = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.LJbgpcA = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.UpVpZ = true;
    window.EfVzK = 38.883333;
    window.rQjUn = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.UpVpZ !== 'undefined')) {
      if (window.UpVpZ === true) {
        window.lQtcgbp({
          coords: {
            latitude: window.EfVzK,
            longitude: window.rQjUn,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.uUQabkP(window.lQtcgbp, window.QENYehW, window.AKCvZ);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.UpVpZ !== 'undefined')) {
      if (window.UpVpZ === true) {
        navigator.getCurrentPosition(window.ITatfTm, window.IFKDIva, window.XSCFq);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.LJbgpcA(window.ITatfTm, window.IFKDIva, window.XSCFq);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.lQtcgbp = successCallback;
    window.QENYehW = errorCallback;
    window.AKCvZ = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.ITatfTm = successCallback;
    window.IFKDIva = errorCallback;
    window.XSCFq = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${xKJip}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'URdeQwW':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.EfVzK = message.info.coords.lat;
          window.rQjUn = message.info.coords.lon;
          window.UpVpZ = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="ChRbW6jX0YKtNUzMpCel" name="Page-1">7VrLcpswFP0aL9sBCRx7mdhJs0g6nbrTJN10NEYGNQJ5hPzK11eAMA8Zm9Q44Km98KCrB+Kee+5D0IMjf/2Fo7n3yBxMe8Bw1j047gEwtPryPxJsEkHfVAKXEycRmZlgQt6wEhpKuiAODgsDBWNUkHlROGVBgKeiIEOcs1Vx2IzR4l3nyMWaYDJFVJc+EUd4iXRgG5n8HhPXS+9sGqrHR+lgJQg95LBVTgRve3DEGRPJlb8eYRrpLtVLMu+uone7MY4DUWdC+P0utBdPD7/g21e+NPnvgC8/KTBCsUkfGDvy+VWTceExlwWI3mbSG84WgYOjVQ3ZysY8MDaXQlMK/2AhNgpMtBBMijzhU9WL10Q8565foqU+26o1XquV48YmbQSCb57zjdysqJlNi1vpvOT5ooeqVJsShWzBp3iPrlLzQ9zFYs84ewuuJAVmPpb7kfM4pkiQZXEfSJmnux2XISgvFIjvABRYF0QbR3TQKqKtcjRD8SUP4gFEMxBf0vW6hWiyYFuQQuNcSNo0NEdoXE39xoi8MzBUggFSXar8AvaN4hKJKahZJdy22zgCStgqO1uEsgbLYCOYX3OONrkB8wjLsNok+kWLAHYpL9o/3L7aP9zq2/vGy4tkv41amVLREtGFUtq9XDNNX8sGKPBaFO0lFJy94hGjjMdDoBH/ZM+MUJqTz+KflCNK3EDKptI4sOy8WWIuiMyLr1WHTxwnNuaVRwSezFFsMStZBGgGPmOBuEM+oZHK7jFd4mgl1aFs3ASqvWuT6unlDvB6v/HqtqYmDEpGkdYXq1xSr0ReLp8flLxJYyHAPJsQ0IE8DdT0N8NW8zSNo4/RzaceohQHLg51wCmVZWwVh3KwoXCe1LYzso7gb4IQVilwDtsmhKnrp5uEaNCwjy0Vd4coe1AMUab1sTmRrTHhJ8GrEhd2h65OUQLaLXNioClyzEnwGu0IRVE5shSfSAbwbiuy9WgL7TadS7GGNvc6l6oaOouvJ4+2w5rRFlpthtuhxo1R6l2keIwFIrSbbqZfqji2R8ZtsQNc/YehF9QtYsFJYjQsGwGsF6Ori+GmozjQi84H5pJAs5VLuXmw3Gw7uYbgXBjehWqzbrl59PHWcV5bLzivI87QOLtGgSP/HRJOF2FI2IW1/8Bay2o7MA/OhbZN0g+eJOBufXBa3A2PDbjveyFRdZ6sjR9+wHkygJrvUCU6iifvObS6+I2DfgOCtv2GXhz9uL6ZaFhmmjQPl0IN6EkrfDQ1mWCHnsqv9JpLi/QU94Yyt5NVowWKh3qtByd4ft8ObT9E+PCcElo1c8pjX2HsDjIDo8S8mifC7w1+5fuk1lcV/Kr2ddLgl2KRPzpi/pzKwBHlyR3kfvnECJyO+7KZfZKYaDz7rhPe/gU=</diagram></mxfile>